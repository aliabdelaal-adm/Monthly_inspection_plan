#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Smart Google Maps Location Generator - PERMANENTLY DISABLED
============================================================
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL WARNING: THIS SCRIPT IS PERMANENTLY DISABLED ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

ÿ™ÿ≠ÿ∞Ÿäÿ± ÿ≠ÿ±ÿ¨: Ÿáÿ∞ÿß ÿßŸÑÿ≥ŸÉÿ±Ÿäÿ®ÿ™ ŸÖŸèÿπÿ∑ŸéŸëŸÑ ÿ®ÿ¥ŸÉŸÑ ÿØÿßÿ¶ŸÖ
============================================================

**DO NOT MODIFY OR RE-ENABLE THIS SCRIPT WITHOUT EXPLICIT AUTHORIZATION**
**ŸÑÿß ÿ™ŸÇŸÖ ÿ®ÿ™ÿπÿØŸäŸÑ ÿ£Ÿà ÿ•ÿπÿßÿØÿ© ÿ™ŸÅÿπŸäŸÑ Ÿáÿ∞ÿß ÿßŸÑÿ≥ŸÉÿ±Ÿäÿ®ÿ™ ÿ®ÿØŸàŸÜ ÿ•ÿ∞ŸÜ ÿµÿ±Ÿäÿ≠**

REASON FOR PERMANENT DISABLE:
This script used to automatically generate Google Maps links based on shop names and addresses.
Auto-generated links are INACCURATE and do NOT guarantee 100% location precision.

ÿ≥ÿ®ÿ® ÿßŸÑÿ™ÿπÿ∑ŸäŸÑ ÿßŸÑÿØÿßÿ¶ŸÖ:
ŸÉÿßŸÜ Ÿáÿ∞ÿß ÿßŸÑÿ≥ŸÉÿ±Ÿäÿ®ÿ™ ŸäŸàŸÑÿØ ÿ±Ÿàÿßÿ®ÿ∑ ÿÆÿ±ÿßÿ¶ÿ∑ ÿ¨Ÿàÿ¨ŸÑ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿ£ÿ≥ŸÖÿßÿ° ŸàÿπŸÜÿßŸàŸäŸÜ ÿßŸÑŸÖÿ≠ŸÑÿßÿ™.
ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑŸÖŸàŸÑÿØÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ÿ∫Ÿäÿ± ÿØŸÇŸäŸÇÿ© ŸàŸÑÿß ÿ™ÿ∂ŸÖŸÜ ÿØŸÇÿ© 100% ŸÑŸÑŸÖŸàŸÇÿπ.

MANDATORY REQUIREMENT:
All Google Maps location links MUST be manually provided by copying the link directly 
from Google Maps to ensure 100% accuracy and realism.

ÿßŸÑŸÖÿ™ÿ∑ŸÑÿ® ÿßŸÑÿ•ŸÑÿ≤ÿßŸÖŸä:
ÿ¨ŸÖŸäÿπ ÿ±Ÿàÿßÿ®ÿ∑ ŸÖŸàÿßŸÇÿπ ÿÆÿ±ÿßÿ¶ÿ∑ ÿ¨Ÿàÿ¨ŸÑ Ÿäÿ¨ÿ® ÿ£ŸÜ Ÿäÿ™ŸÖ ÿ™ŸàŸÅŸäÿ±Ÿáÿß ŸäÿØŸàŸäÿßŸã ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ŸÜÿ≥ÿÆ ÿßŸÑÿ±ÿßÿ®ÿ∑ ŸÖÿ®ÿßÿ¥ÿ±ÿ©
ŸÖŸÜ ÿÆÿ±ÿßÿ¶ÿ∑ ÿ¨Ÿàÿ¨ŸÑ ŸÑÿ∂ŸÖÿßŸÜ ÿØŸÇÿ© 100% ŸàŸàÿßŸÇÿπŸäÿ©.

DO NOT USE THIS SCRIPT. Location links must be manually provided for each shop.
ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ Ÿáÿ∞ÿß ÿßŸÑÿ≥ŸÉÿ±Ÿäÿ®ÿ™. Ÿäÿ¨ÿ® ÿ™ŸàŸÅŸäÿ± ÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑŸÖŸàÿßŸÇÿπ ŸäÿØŸàŸäÿßŸã ŸÑŸÉŸÑ ŸÖÿ≠ŸÑ.

For instructions on how to add manual Google Maps links, see:
- GOOGLE_MAPS_MANUAL_LINKS_ONLY.md
- README_DISABLE_AUTO_GEOCODING.md
"""

import sys
import os

# SECURITY CHECK: Verify this file hasn't been tampered with
# ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿßŸÑÿ£ŸÖŸÜŸä: ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿπÿØŸÖ ÿßŸÑÿπÿ®ÿ´ ÿ®Ÿáÿ∞ÿß ÿßŸÑŸÖŸÑŸÅ
DISABLE_TOKEN = "AUTO_GEOCODING_PERMANENTLY_DISABLED_100_PERCENT"

# Multiple exit points to ensure script cannot accidentally run
# ŸÜŸÇÿßÿ∑ ÿÆÿ±Ÿàÿ¨ ŸÖÿ™ÿπÿØÿØÿ© ŸÑÿ∂ŸÖÿßŸÜ ÿπÿØŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥ŸÉÿ±Ÿäÿ®ÿ™ ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ÿßŸÑÿÆÿ∑ÿ£

# Exit point 1: Immediate exit
print("=" * 80)
print("‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è  CRITICAL ERROR: THIS SCRIPT IS PERMANENTLY DISABLED  ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è")
print("=" * 80)
print()
print("‚ùå REASON: Auto-geocoding does NOT provide 100% accurate locations")
print("‚ùå ÿßŸÑÿ≥ÿ®ÿ®: ÿßŸÑÿ™ÿ±ŸÖŸäÿ≤ ÿßŸÑÿ¨ÿ∫ÿ±ÿßŸÅŸä ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä ŸÑÿß ŸäŸàŸÅÿ± ŸÖŸàÿßŸÇÿπ ÿØŸÇŸäŸÇÿ© ÿ®ŸÜÿ≥ÿ®ÿ© 100%")
print()
print("‚úÖ REQUIRED: Manual Google Maps links ONLY")
print("‚úÖ ŸÖÿ∑ŸÑŸàÿ®: ÿ±Ÿàÿßÿ®ÿ∑ ÿÆÿ±ÿßÿ¶ÿ∑ ÿ¨Ÿàÿ¨ŸÑ ŸäÿØŸàŸäÿ© ŸÅŸÇÿ∑")
print()
print("üìñ See documentation:")
print("   - GOOGLE_MAPS_MANUAL_LINKS_ONLY.md")
print("   - README_DISABLE_AUTO_GEOCODING.md")
print()
print("=" * 80)
sys.exit(1)

# Exit point 2: Secondary check (should never reach here)
if True:
    print("\n‚ö†Ô∏è  SECONDARY CHECK FAILED - SCRIPT STILL DISABLED")
    sys.exit(1)

# Exit point 3: Final safeguard (should never reach here)
raise RuntimeError("CRITICAL: Auto-geocoding script is permanently disabled. Use manual Google Maps links only.")

# Original code below (kept for reference but never executed due to sys.exit above)
import json
import urllib.parse
from typing import Dict, Any

def generate_google_maps_url(shop_name: str, shop_details: Dict[str, Any]) -> str:
    """
    Generates a Google Maps search URL based on shop information.
    
    Uses shop name, address, and area to create an accurate search query.
    
    Args:
        shop_name: The shop name (key in shops_details.json)
        shop_details: Dictionary containing shop information
        
    Returns:
        A Google Maps URL for the shop location
    """
    # Extract relevant information
    name_ar = shop_details.get('nameAr', shop_name)
    name_en = shop_details.get('nameEn', '')
    address = shop_details.get('address', '')
    
    # Build search query with available information
    search_parts = []
    
    # Use Arabic name as primary identifier
    if name_ar:
        search_parts.append(name_ar)
    
    # Add address for better location accuracy
    if address:
        # Clean up address
        addr_clean = address.replace(',', ' ').strip()
        search_parts.append(addr_clean)
    
    # Always add Abu Dhabi to ensure results are in the right city
    if 'ÿ£ÿ®Ÿà ÿ∏ÿ®Ÿä' not in address and 'Abu Dhabi' not in address:
        search_parts.append('ÿ£ÿ®Ÿà ÿ∏ÿ®Ÿä')
    
    # Combine search parts
    search_query = ' '.join(search_parts)
    
    # URL encode the search query
    encoded_query = urllib.parse.quote(search_query)
    
    # Create Google Maps search URL
    # Format: https://www.google.com/maps/search/?api=1&query=ENCODED_QUERY
    maps_url = f"https://www.google.com/maps/search/?api=1&query={encoded_query}"
    
    return maps_url


def update_shops_with_google_maps():
    """
    Main function to update all shops with Google Maps location links.
    """
    # Load existing shops data
    print("üìÇ Loading shops_details.json...")
    try:
        with open('shops_details.json', 'r', encoding='utf-8') as f:
            shops_details = json.load(f)
    except FileNotFoundError:
        print("‚ùå Error: shops_details.json not found!")
        return
    except json.JSONDecodeError:
        print("‚ùå Error: shops_details.json is not valid JSON!")
        return
    
    total_shops = len(shops_details)
    shops_updated = 0
    shops_already_had_maps = 0
    
    print(f"\nüè™ Total shops in database: {total_shops}")
    
    # Process each shop
    print("\nüîÑ Processing shops...")
    for shop_name, shop_info in shops_details.items():
        # Check if shop already has a location map
        if shop_info.get('locationMap', ''):
            shops_already_had_maps += 1
            print(f"  ‚úì {shop_name}: Already has location map (skipping)")
            continue
        
        # Generate Google Maps URL
        maps_url = generate_google_maps_url(shop_name, shop_info)
        
        # Update shop with new location map
        shop_info['locationMap'] = maps_url
        shops_updated += 1
        
        print(f"  ‚úÖ {shop_name}: Generated location map")
    
    # Save updated data
    print(f"\nüíæ Saving updated data to shops_details.json...")
    with open('shops_details.json', 'w', encoding='utf-8') as f:
        json.dump(shops_details, f, ensure_ascii=False, indent=2)
    
    # Print summary
    print("\n" + "="*60)
    print("üìä SUMMARY REPORT")
    print("="*60)
    print(f"üè™ Total shops in database: {total_shops}")
    print(f"‚úÖ Shops updated with new maps: {shops_updated}")
    print(f"‚úì  Shops already had maps: {shops_already_had_maps}")
    print(f"üéØ Total shops with maps now: {shops_updated + shops_already_had_maps}")
    print("="*60)
    print("\n‚úÖ Process completed successfully!")
    print("üí° All 204 shops now have Google Maps location links!")
    
    # Generate sample output for verification
    print("\nüìã Sample generated links:")
    count = 0
    for shop_name, shop_info in shops_details.items():
        if count >= 5:
            break
        if shop_info.get('locationMap', ''):
            print(f"\n  Shop: {shop_name}")
            print(f"  Link: {shop_info['locationMap']}")
            count += 1


if __name__ == "__main__":
    print("üó∫Ô∏è  Google Maps Location Generator for Smart Planner")
    print("="*60)
    update_shops_with_google_maps()
